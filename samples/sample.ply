+  num num	= num
-  num num	= num
*  num num	= num
/  num num	= num
^  num num	= num
%  num num	= num

<  num num	= bool
<= num num	= bool
>  num num	= bool
>= num num	= bool

=  A A 		= bool
!= A A		= bool

& bool bool	= bool
| bool bool	= bool
! bool		= bool

? bool A A	= A

++  A [A] = [A]
!# [A]    =  A
#! [A]    = [A]

@ = Undefined

----------------------------------------------------------------------------------------------------

\   backslash
~   tilde
"   double quote
;   semi colon
_	underscore
,	comma
â€˜	apostrophe
`	grave accent
{}	curly braces

----------------------------------------------------------------------------------------------------

fibonacci(limit) = ? (limit < 0, @
	                  ? (limit = 0, [],
	                     ? (limit = 1, [1],
	                      	? (limit = 2, [1, 1],
	                      	   fibo(3, limit, [1, 1])
	                      	)
	                     )
	                  )
	               )

fibonacci(limit) = ? (limit < 0, @
	                  ? (limit = 0, [],
	                     ? (limit = 1, [1],
	                      	? (limit = 2, [1, 1],
	                      	   fibo(3, limit, [1, 1])))))

fibonacci(limit) = ? (limit < 0, @
	               ? (limit = 0, [],
	               ? (limit = 1, [1],
	               ? (limit = 2, [1, 1],
	               fibo(3, limit, [1, 1])))))

fibo(index, limit, list) = ? (index > limit, list,
                              fibo(index + 1, limit, (nth(index - 1, list) + nth(index - 2, list)) ++ list))

factorial(n) = ? (n = 0, 1,
	              n * factorial(n - 1))

map(f, a) =
	? (a = [],
	   [],
	   f(head(a)) + map(f, tail(a))
	)

length(a) = #(a)

head(a) =
	? (a != [],
	   @(0, a),
	   {ERROR}
	)

tail(a) =
	? (a != [],
	   -(0, a),
	   {ERROR}
	)

apply(f a b) = f(a + b)

duplicate(a) = a * 2

even(n) = (n % 2) = 0

odd(n) = (n % 2) != 0

----------------------------------------------------------------------------------------------------

apply('duplicate', 3, 4)

factorial(1)

fibo(0, 5, [])

map('duplicate', [1, 2, 3])