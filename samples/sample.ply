+  num num	= num
-  num num	= num
*  num num	= num
/  num num	= num
^  num num	= num
%  num num	= num

<  num num	= bool
<= num num	= bool
>  num num	= bool
>= num num	= bool

=  A A 		= bool
!= A A		= bool

& bool bool	= bool
| bool bool	= bool
! bool		= bool

? bool A A	= A

::  A  [A] = [A]
++ [A] [A] = [A]
!# [A]     =  A
#! [A]     = [A]

----------------------------------------------------------------------------------------------------

~ Num       = %
~ Bool      = ?
~ Char      = @
~ String    = [Char]

----------------------------------------------------------------------------------------------------

Person
{
	name:String,
	age:Num,
	weight:Num
}

----------------------------------------------------------------------------------------------------

fibonacci(limit:Num):[Num] = ? (limit < 0, @
	                         ? (limit = 0, [],
	                         ? (limit = 1, [1],
	                         ? (limit = 2, [1, 1],
	                         fibo(3, limit, [1, 1])))))

fibo(index:Num, limit:Num, list:[Num]) = ? (index > limit, list,
                                            fibo(index + 1, limit, (nth(index - 1, list) + nth(index - 2, list)) ++ list))

factorial(n:Num):Num = if (n = 0,
                           1,
	                       n * factorial(n - 1))

map(f:(A : B), l:[A]):[B] = if (l = [],
                                [],
								f(head(l)) :: map(f, tail(l))
						    )

letExample(n:Num):Bool = _(positive, n > 0,
				           prime, prime(n),
				           even, n % 2 = 0,
				           positive & prime & even
				          )

head(a:[A]):A =
	? (a != [],
	   @(0, a),
	   {ERROR}
	)

tail(a:[A]):[A] =
	? (a != [],
	   -(0, a),
	   {ERROR}
	)

apply(f:(Num:Num), a:Num, b:Num):Num = f(a + b)

duplicate(a:Num):Num = a * 2

even(n:Num):Bool = (n % 2) = 0

odd(n:Num):Bool = (n % 2) != 0

mergePersons(p1:Person, p2:Person):Person = Person(p1.name + p2.name, p1.age + p2.age, p1.weight + p2.weight)

personId(p:Person):String = p.name ++ p.age ++ p.weight

mergeLists(l1:[A], l2:[A]):[A] = l1 ++ l2

if(c:Bool, a:A, b:B) = ?(c, a, b)

pi : Num = 3.14

true : Bool = >>

false : Bool = <<

----------------------------------------------------------------------------------------------------

apply('duplicate', 3, 4)

factorial(5)

fibo(0, 5, [])

map('duplicate', [1, 2, 3])