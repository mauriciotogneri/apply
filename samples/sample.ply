+  num num	= num
-  num num	= num
*  num num	= num
/  num num	= num
^  num num	= num
%  num num	= num

<  num num	= bool
<= num num	= bool
>  num num	= bool
>= num num	= bool

& bool bool	= bool
| bool bool	= bool
! bool		= bool

? bool A A	= A

=  A A 		= bool
!= A A		= bool

@  num [A]	= A
#  [A]		= num
<< num [A]	= [A]
>> [A] [A]	= [A]
+>  A  [A]	= [A]
<+ [A]  A	= [A]

----------------------------------------------------------------------------------------------------

\   backslash
~   tilde
"   double quote
;   semi colon
_	underscore
,	comma
â€˜	apostrophe
`	grave accent
{}	curly braces

----------------------------------------------------------------------------------------------------

fibo(index, limit, list) =
    ? (index >= limit,
    	list,
    	? (index = 0,
    		fibo(1, limit, [1]),
    		? (index = 1,
    			fibo(2, limit, [1, 1]),
    			_ (fist,
    			    @(index - 1, list),
    			    _ (second,
                        @(index - 2, list),
                        fibo(index + 1, limit, (first + second) + list)
                    )
    			)
    		)
    	)
    )

test(list, array) =
	_ (foo,
		@(0, list),
		foo + array
	)

factorial(n) =
    ? (n = 0,
       1,
       n * factorial(n - 1)
    )

map(f, a) =
	? (a = [],
	   [],
	   f(head(a)) + map(f, tail(a))
	)

length(a) = #(a)

head(a) =
	? (a != [],
	   @(0, a),
	   {ERROR}
	)

tail(a) =
	? (a != [],
	   -(0, a),
	   {ERROR}
	)

apply(f a b) = f(a + b)

duplicate(a) = a * 2

even(n) = (n % 2) = 0

odd(n) = (n % 2) != 0

----------------------------------------------------------------------------------------------------

apply('duplicate', 3, 4)

factorial(1)

fibo(0, 5, [])

map('duplicate', [1, 2, 3])