Num
{
	add(m: Num): Num

	subtract(m: Num): Num

	multiply(m: Num): Num

	divide(m: Num): Num

	pow(m: Num): Num

	mod(m: Num): Num

	less(m: Num): Bool

	lessEqual(m: Num): Bool

	greater(m: Num): Bool

	greaterEqual(m: Num): Bool

	int(): Integer

	long(): Long

	float(): Float

	double(): Double
}

String
{
	empty(): Bool

	length(): Num

	concat(s: String): String

	element(n: Num): String

	contains(s: String): Bool

	startsWith(s: String): Bool

	endsWith(s: String): Bool

	trim(): String

	toLowerCase(): String

	toUpperCase(): String
}

Bool
{
	and(b: Bool): Bool

	or(b: Bool): Bool

	not(): Bool
}

List<A>
{
	empty(): Bool

	length(): Num

	element(n: Num): Option<A>

	head(): Option<A>

	last(): Option<A>

	init(): Option<List<A>>

	tail(): Option<List<A>>

	appendFirst(a: A): List<A>

	appendLast(a: A): List<A>

	concat(l: List<A>): List<A>

	//------------------------------------------------

	map(f: Function1<A, B>): List<B> = map2(f, this)

	map2(f: Function1<A, B>, l: List<A>): List<B> =
		if (l.empty)
			l
		else
			map(f, l.tail).appendFirst(f(l.head))

	// take
	// drop
    // reverse
    // filter
    // and
    // or
    // any
    // all
    // take n xs
    // empty xs
    // zip xs [0..]
    // foldl
    // foldr
}

Any
{
	equal(a: Any): Bool

	notEqual(a: Any): Bool
}

Option<T>
{
	get(): T

	isPresent(): Bool

	orElse(t: T): T
}

----------------------------------------------------------------------------------------------------

Person
{
	name: String,
	age: Num,
	weight: Num
}

optionExample(n: Num): Option<Num> =
	if (n == 0)
		Option()
	else
		Option(n * 2)

optionExample2(o: Option<Num>): Num =
	if (o.isPresent)
		o.get * 2
	else
		-1

fibonacci(limit: Num): Option<List<Num>> =
	if (limit < 0)
		Option()
	else if (limit == 0)
		Option(List())
	else if (limig == 1)
		Option(List(1))
	else if (limit == 2)
		Option(List(1, 1))
	else
		Option(fibo(3, limit, List(1, 1)))

fibo(index: Num, limit: Num, list: List<Num>): List<Num> =
{
	if (index > limit)
	{
		list
	}
	else
	{
		let first: Num  = list.element(index - 1)
		let second: Num = list.element(index - 2)
		fibo(index + 1, limit, list.appendFirst(first + second))
	}
}

factorial(n: Num): Num =
	if (n = 0)
		1
	else
		n * factorial(n - 1)

letExample(n: Num) =
{
	let positive: Bool = n > 0
	let prime: Bool = prime(n)
	let even: Bool = n % 2 = 0
	positive & prime & even
}

apply(f: Function1<Num, Bool>, a: Num, b: Num): Bool = f(a + b)

duplicate(n: Num): Num = n * 2

even(n: Num): Bool = (n % 2) = 0

odd(n: Num): Bool = (n % 2) != 0

mergePersons(p1: Person, p2: Person): Person = Person(p1.name + p2.name, p1.age + p2.age, p1.weight + p2.weight)

personId(p: Person): String = p.name + " " + p.age + " " + p.weight

mergeLists(l1: List<A>, l2: List<A>): List<A> = l1 + l2

pi: Num = 3.14

----------------------------------------------------------------------------------------------------

apply('even', 3, 4)

factorial(5)

fibo(0, 5, List())

List(1, 2, 3).map('duplicate')